apiVersion: v1
kind: Namespace
metadata:
  name: servicex
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: enable-config
  namespace: servicex
data:
  Cleverbit__Enabled: "true"
---
apiVersion: v1
kind: Secret
metadata:
  name: servicey-url
  namespace: servicex
type: Opaque
data:
  Cleverbit__Url: aHR0cDovL3NlcnZpY2V5LnNlcnZpY2V5LnN2Yy5jbHVzdGVyLmxvY2Fs
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: servicex
  namespace: servicex
spec:
  replicas: 1
  selector:
    matchLabels:
      app: servicex
  template:
    metadata:
      labels:
        app: servicex
    spec:
      containers:
      - name: servicex
        image: 4719/s2s:v1
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: url-secret
          mountPath: /app/kpf/secret
          readOnly: true
        - name: enable-config
          mountPath: /app/kpf/enable-config
          readOnly: true
      volumes:
      - name: url-secret
        secret:
          secretName: servicex-url
      - name: enable-config
        configMap:
          name: enable-config
---
apiVersion: v1
kind: Service
metadata:
  name: servicex
  namespace: servicex
spec:
  selector:
    app: servicex
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: servicex-virtualservice
  namespace: servicex
spec:
  hosts:
  - "servicex.cb-interview.com"
  gateways:
  - istio-ingress/istio-ingress
  http:
  - match:
    - uri:
        prefix: "/"
    route:
    - destination:
        host: servicex.servicex.svc.cluster.local
        port:
          number: 8080
---
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: jwt-authentication
  namespace: servicex
spec:
  jwtRules:
  - issuer: "testing@secure.istio.io"
    jwksUri: "https://raw.githubusercontent.com/istio/istio/release-1.20/security/tools/jwt/samples/jwks.json"

---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: jwt-policy
  namespace: servicex
spec:
  selector:
    matchLabels:
      app: servicex
  action: ALLOW
  rules:
  - from:
    - source:
       requestPrincipals: ["*"]
    when:
    - key: request.auth.claims[iss]
      values: ["testing@secure.istio.io"]
  - to:
    - operation:
       paths: ["/*"]
---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: jwt-header-forwarding
  namespace: servicex
spec:
  workloadSelector:
    labels:
      app: servicex
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_INBOUND
        listener:
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
              subFilter:
                name: "envoy.filters.http.jwt_authn"
        proxy:
          proxyVersion: '^1\.8.*'
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.filters.http.lua
          typed_config:
            "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
            inlineCode: |
              function envoy_on_request(request_handle)
                local headers, err = request_handle:httpCall(
                  "envoy.filters.http.jwt_authn",
                  {
                    ["headers"] = {
                      [":method"] = "GET",
                      [":path"] = "/userinfo",
                      [":authority"] = "servicex"
                    },
                    ["timeout"] = "5s",
                  }
                )
                if headers then
                  local payload = headers[":path"]:match("([^/]+)$")
                  if payload then
                    request_handle:headers():add("X-JWT-PAYLOAD", payload)
                  end
                end
              end